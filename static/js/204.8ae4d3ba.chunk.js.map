{"version":3,"file":"static/js/204.8ae4d3ba.chunk.js","mappings":"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","sources":["components/dialogs/message/Message.tsx","components/dialogs/chatOnline/ChatOnline.tsx","components/dialogs/dialogItem/DialogItem.tsx","components/dialogs/addMessageForm/AddMessageForm.tsx","hoc/WithAuthRedirect.tsx","components/dialogs/DialogsContainer.tsx","components/dialogs/Dialogs.tsx"],"sourcesContent":["import '../message/message.css'\r\nimport React from 'react';\r\nimport PersonAvatar0 from '../../../public/assets/person/person0.jpeg'\r\n\r\n\r\ntype MessagePropsType = {\r\n    ownMessage?: boolean\r\n    message: string\r\n    id?: string\r\n}\r\nexport const Message: React.FC<MessagePropsType> = (props) => {\r\n    const {id, ownMessage, message} = props\r\n    return (\r\n        // У него есть активный класс onwMessage\r\n        // <div className={ownMessage ? \"messagePage onwMessage\" : \"messagePage\"}>\r\n        <div className={ownMessage ? \"message ownMessage\" : \"message\"}>\r\n            <div className=\"messageTop\">\r\n                <img className=\"messageImg\"\r\n                     src={PersonAvatar0}\r\n                     alt={\"persAvatar\"}/>\r\n                <p className=\"messageText\">{message}</p>\r\n            </div>\r\n            <div className=\"messageBottom\">1 hour ago</div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import \"./chatOnline.css\"\r\nimport React from 'react';\r\nimport AvatarForChatOnline from '../../../public/assets/person/person0.jpeg'\r\n\r\nexport const ChatOnline = () => {\r\n    return (\r\n        <div className={\"chatOnline\"}>\r\n            <div className=\"onlineFriendsWrapper\">\r\n                <div className={\"onlineFriends\"}>Friends online:</div>\r\n            </div>\r\n            <div className=\"chatOnlineFriend\">\r\n                <div className=\"chatOnlineImgContainer\">\r\n                    <img className=\"chatOnlineImg\"\r\n                         src={AvatarForChatOnline}\r\n                         alt={\"avatarUsersInChat\"}/>\r\n                    <div className=\"chatOnlineBadge\"></div>\r\n                </div>\r\n                <span className=\"chatOnlineUserName\">Diana</span>\r\n            </div>\r\n\r\n            <div className=\"chatOnlineFriend\">\r\n                <div className=\"chatOnlineImgContainer\">\r\n                    <img className=\"chatOnlineImg\"\r\n                         src={AvatarForChatOnline}\r\n                         alt={\"avatarUsersInChat\"}/>\r\n                    <div className=\"chatOnlineBadge\"></div>\r\n                </div>\r\n                <span className=\"chatOnlineUserName\">John</span>\r\n            </div>\r\n\r\n            <div className=\"chatOnlineFriend\">\r\n                <div className=\"chatOnlineImgContainer\">\r\n                    <img className=\"chatOnlineImg\"\r\n                         src={AvatarForChatOnline}\r\n                         alt={\"avatarUsersInChat\"}/>\r\n                    <div className=\"chatOnlineBadge\"></div>\r\n                </div>\r\n                <span className=\"chatOnlineUserName\">Alex</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import './dialogItem.css'\r\nimport React from 'react';\r\nimport AvatarForChatOnline from \"../../../public/assets/person/person0.jpeg\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem: React.FC<DialogItemPropsType> = (props) => {\r\n    const {name, id} = props;\r\n    let path = '/dialogs/' + id;\r\n\r\n    return (\r\n        <>\r\n            <div className={`${\"conversation\"} ${'conversationActive'}`}>\r\n                <div className=\"chatOnlineFriend\">\r\n                    <div className=\"chatOnlineImgContainer\">\r\n                        <img className=\"chatOnlineImg\"\r\n                             src={AvatarForChatOnline}\r\n                             alt={\"avatarUsersInChat\"}/>\r\n                        <div className=\"chatOnlineBadge\"></div>\r\n                    </div>\r\n                    <NavLink to={path} className=\"chatOnlineUserName\">{name}</NavLink>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/formsControl/Textarea\";\r\nimport {maxLengthСreator, minLength, required} from \"../../../utils/validators/Valodators\";\r\n\r\n\r\nexport type FormDialogsDataType = {\r\n    newMessageBody: FormDialogsDataType\r\n}\r\n\r\nconst maxLength45 = maxLengthСreator(45);\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDialogsDataType>> = (props) => {\r\n\r\n    return (\r\n        <form className=\"chatMessagesBottom\" onSubmit={props.handleSubmit}>\r\n\r\n            <Field className=\"chatMessageInput\"\r\n                   placeholder={\"Say hello!\"}\r\n                   component={Textarea}\r\n                   validate={[required, maxLength45, minLength]}\r\n                   name={'newMessageBody'}\r\n                   type={'text'}\r\n                   required\r\n            />\r\n\r\n            <button className=\"chatSubmitBtn\">Send</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const AddMessageReduxForm = reduxForm<FormDialogsDataType>({\r\n    form: 'dialogsAddMessageForm'\r\n})(AddMessageForm);\r\n\r\n\r\n\r\n\r\n\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReduxStoreType} from \"../../src/redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: RootReduxStoreType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent;\r\n}\r\n","import './dialogs.css'\r\nimport './/chatMenu/chatMenu.css'\r\nimport './dialogItem/dialogItem.css'\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {\r\n    DialogsType, FormDialogsDataType, MessagesDataType,\r\n    sendMessageAC,\r\n} from \"../../redux/messages-reducer/messages-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReduxStoreType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport React from \"react\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsData: DialogsType[]\r\n    messagesData: MessagesDataType[]\r\n}\r\nconst mapStateToProps = (state: RootReduxStoreType): MapStateToPropsType => {\r\n    return {\r\n        dialogsData: state.messagePage.dialogsData,\r\n        messagesData: state.messagePage.messagesData,\r\n    }\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    sendMessage: (messageBody: FormDialogsDataType) => void\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        sendMessage: (messageBody: FormDialogsDataType) => {\r\n            dispatch(sendMessageAC(messageBody));\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    WithAuthRedirect,\r\n    connect<MapStateToPropsType, MapDispatchToProps, any, RootReduxStoreType>(mapStateToProps, mapDispatchToProps))(Dialogs)","import React from 'react';\r\nimport './dialogs.css'\r\nimport {Message} from \"./message/Message\";\r\nimport {ChatOnline} from \"./chatOnline/ChatOnline\";\r\nimport './/chatMenu/chatMenu.css'\r\nimport './dialogItem/dialogItem.css'\r\nimport {DialogItem} from \"./dialogItem/DialogItem\";\r\nimport {\r\n    DialogsType,\r\n    MessagesDataType,\r\n    NewMessageBody\r\n} from \"../../redux/messages-reducer/messages-reducer\";\r\nimport {AddMessageReduxForm, FormDialogsDataType} from \"../../../src/components/dialogs/addMessageForm/AddMessageForm\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: (messageBody: FormDialogsDataType) => void\r\n    dialogsData: DialogsType[]\r\n    messagesData: MessagesDataType[]\r\n    newMessageBody: NewMessageBody\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n    const {\r\n        dialogsData,\r\n        messagesData,\r\n        sendMessage\r\n    } = props;\r\n\r\n    const dialogsElements = dialogsData.map(dialog =>\r\n        <DialogItem key={dialog.id}\r\n                    name={dialog.name}\r\n                    id={dialog.id}\r\n        />\r\n    );\r\n\r\n\r\n    const messageElements = messagesData.map(message =>\r\n        <Message key={message.id}\r\n                 message={message.message}\r\n                 id={message.id}\r\n                 ownMessage={message.ownMessage}\r\n        />\r\n    );\r\n\r\n    //SEND MESSAGE:\r\n    // const PressEnterHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n    //     const value = e.key;\r\n    //     if (value === 'Enter') {\r\n    //         onSendMessageClickHandler();\r\n    //     }\r\n    // }\r\n    // const onSendMessageClickHandler = () => {\r\n    //     console.log('SEND')\r\n    //     sendMessage();\r\n    // }\r\n    // const onNewMessageChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let body = e.currentTarget.value;\r\n    //     updateNewMessageBody(body)\r\n    // }\r\n    const addNewMessage = (messageBody: FormDialogsDataType) => {\r\n        sendMessage(messageBody);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className={\"messenger\"}>\r\n                <div className=\"messages\">\r\n                    <div className=\"messagesWrapper\">\r\n                        <div className=\"messagesTop\">\r\n                            {messageElements}\r\n                        </div>\r\n\r\n                        <AddMessageReduxForm onSubmit={addNewMessage} />\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                {/*//Люди справа*/}\r\n                <div className={\"dialogs\"}>\r\n                    <div className=\"chatOnlineWrapper\">\r\n                        <div className=\"chatMenu\">\r\n                            <div className=\"chatMenuWrapper\">\r\n\r\n                                {/*//ChatMenu из компоненты CHATMENU*/}\r\n                                <div className=\"chatMenu\">\r\n                                    <div className=\"dialogsFriends\">Your dialogues:</div>\r\n                                    <div className=\"chatMenuWrapper\">\r\n                                        <input className={\"chatMenuInput\"}\r\n                                               type=\"text\"\r\n                                               placeholder={\"Search for friends\"}/>\r\n                                    </div>\r\n                                </div>\r\n                                {dialogsElements}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/*<ChatMenu/>*/}\r\n                        <ChatOnline/>\r\n                    </div>\r\n\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\n"],"names":["Message","props","id","ownMessage","message","className","src","PersonAvatar0","alt","ChatOnline","AvatarForChatOnline","DialogItem","name","path","to","maxLength45","maxLengthСreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","minLength","type","mapStateToProps","state","isAuth","auth","compose","withRouter","Component","connect","restProps","dialogsData","messagePage","messagesData","dispatch","sendMessage","messageBody","sendMessageAC","dialogsElements","map","dialog","messageElements"],"sourceRoot":""}